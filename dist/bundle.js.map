{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app.js","webpack:///./src/todo.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","[object Object]","this","useLocalStorage","checkLocalStorage","currentListIndex","currentTaskIndex","hasChanged","settings","currentWorkspace","version","defaultWorkspace","id","title","lists","listData","taskData","getCurrentDate","workspaces","copyObject","workspaceIndex","workspace","autoSave","localStorage","getItem","localStorageSetup","JSON","parse","updateWorkspaceDropdown","getWorkspaces","getSettings","setInterval","_this","console","log","setSettings","serializeLists","setWorkspaces","loadWorkspace","bindEvents","$","on","dataAncestor","parent","is","addClass","find","completeTask","attr","removeClass","unCompleteTask","e","window","event","keyCode","which","addTask","val","remove","getListName","data","dataStr","encodeURIComponent","stringify","dlAnchorElem","document","getElementById","setAttribute","click","getImportData","listId","applyTodoFilter","applyCompletedFilter","removeFilters","getWorkspaceName","renameList","clearList","deleteList","renameWorkspace","deleteWorkspace","listName","Swal","fire","input","inputValidator","length","showCloseButton","showCancelButton","confirmButtonText","confirmButtonAriaLabel","cancelButtonAriaLabel","cancelButtonText","focusConfirm","addList","workspaceName","createWorkspace","text","workspaceId","inputPlaceholder","importedData","type","confirmButtonColor","cancelButtonColor","then","result","html","splice","setItem","removeItem","append","j","list","tasksHtml","k","tasks","task","concat","taskHtml","checked","dateChecked","column","listHtml","groups","Sortable","animation","ghostClass","containers","group","taskText","show","hide","newWorkspace","push","theme","collapsed","sort-lock","filter","taskId","strikethrough","today","Date","dd","getDate","mm","getMonth","getFullYear","each","listIndex","listElem","newList","taskIndex","taskElem","prop"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import Todo from \"./todo\";\r\n\r\n\r\nconst todo = new Todo();\r\n\r\n","export default class Todo {\r\n    constructor() {\r\n        this.useLocalStorage = this.checkLocalStorage();\r\n        this.currentListIndex = 1;\r\n        this.currentTaskIndex = 1;\r\n        this.hasChanged = false;\r\n\r\n        this.settings = {\r\n            'currentWorkspace': 1,\r\n            'version' : '1.0',\r\n        };\r\n        this.defaultWorkspace = {\r\n                'id' : 1,\r\n                'title' : 'Workspace 1',\r\n                'lists' : [\r\n                    this.listData(2, 'My first list', [\r\n                        this.taskData('This is an active task!', false, null),\r\n                        this.taskData('This is a completed task!', true, this.getCurrentDate())\r\n                    ])\r\n                ]\r\n        };\r\n        this.workspaces = [ this.copyObject(this.defaultWorkspace) ]; // Sensibile default in case loading fails\r\n        this.workspaceIndex = 0; // Because lazy, but also performance\r\n        this.workspace = null; // contains only the current workspace\r\n        this.autoSave = null;\r\n\r\n        // If using localstorage, see if we need to do setup\r\n        if (this.useLocalStorage === true) {\r\n            if (localStorage.getItem('workspaces') === null || localStorage.getItem('settings') === null) {\r\n                this.workspaces = this.localStorageSetup();\r\n                this.settings = JSON.parse(localStorage.getItem('settings'));\r\n\r\n                // Once workspaces are loaded, populate workspace controls with the ability to switch\r\n                this.updateWorkspaceDropdown();\r\n            } else {\r\n                this.workspaces = this.getWorkspaces();\r\n                this.settings = this.getSettings();\r\n\r\n                // Once workspaces are loaded, populate workspace controls with the ability to switch\r\n                this.updateWorkspaceDropdown();\r\n            }\r\n\r\n\r\n            // Setup auto-save every 10 seconds\r\n            this.autoSave = setInterval(function(_this, settings, workspaces) {\r\n                if (_this.hasChanged) {\r\n                    console.log(\"auto-saving...\");\r\n                    _this.setSettings();\r\n                    _this.workspace.lists = _this.serializeLists();\r\n                    _this.workspaces[_this.workspaceIndex] = _this.workspace;\r\n                    _this.setWorkspaces();\r\n                    _this.hasChanged = false;\r\n                    console.log(\"Saving complete\");\r\n                }\r\n            }, 30000, this, this.settings, this.workspaces);\r\n\r\n            this.loadWorkspace(this.settings.currentWorkspace);\r\n        }\r\n\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n\r\n\r\n        var _this = this;\r\n        $(\"body\").on(\"change\", \".todo-item:checkbox\", function() {\r\n            _this.hasChanged = true;\r\n            var dataAncestor = $(this).parent().parent().parent();\r\n            if ($(this).is(':checked')) {\r\n                $(this).parent().parent().parent().addClass('checked');\r\n                $(this).parent().parent().find('.checkbox-label label').addClass('strikethrough');\r\n                _this.completeTask(dataAncestor.attr('data-listid'), dataAncestor.attr('data-taskid'));\r\n            } else {\r\n                $(this).parent().parent().parent().removeClass('checked');\r\n                $(this).parent().parent().find('.checkbox-label label').removeClass('strikethrough');\r\n                _this.unCompleteTask(dataAncestor.attr('data-listid'), dataAncestor.attr('data-taskid'));\r\n            }\r\n        });\r\n\r\n        $(\"body\").on(\"keyup\", '.todo-input', function(e) {\r\n            if (!e) e = window.event;\r\n            var key = e.keyCode || e.which;\r\n            if (key == '13') {\r\n                _this.hasChanged = true;\r\n                _this.addTask($(this).attr('data-listid'), $(this).val());\r\n                $(this).val('');\r\n            }\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".task-delete\", function() {\r\n            _this.hasChanged = true;\r\n            var listId = $(this).attr('data-listid');\r\n            var taskId = $(this).attr('data-taskid');\r\n            $(this).parent().parent().remove();\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspace-list-create\", function() {\r\n            _this.getListName();\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspaces-export\", function() {\r\n            // Create a combined object with settings and workspaces\r\n            var data = {\r\n                settings: _this.settings,\r\n                workspaces: _this.workspaces\r\n            };\r\n\r\n            var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(data));\r\n            var dlAnchorElem = document.getElementById('export-element');\r\n            dlAnchorElem.setAttribute(\"href\", dataStr);\r\n            dlAnchorElem.setAttribute(\"download\", \"todobackup.json\");\r\n            dlAnchorElem.click();\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspaces-import\", function() {\r\n            _this.getImportData();\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-filter-todo\", function() {\r\n            var listId = $(this).attr('data-listid');\r\n            _this.applyTodoFilter(listId);\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-filter-completed\", function() {\r\n            var listId = $(this).attr('data-listid');\r\n            _this.applyCompletedFilter(listId);\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-filter-all\", function() {\r\n            var listId = $(this).attr('data-listid');\r\n            _this.removeFilters(listId);\r\n        });\r\n\r\n        $(\"body\").on(\"change\", \"#workspace-selection\", function() {\r\n            // Save before making any changes\r\n            console.log(\"Saving...\");\r\n            _this.setSettings();\r\n            _this.workspace.lists = _this.serializeLists();\r\n            _this.workspaces[_this.workspaceIndex] = _this.workspace;\r\n            _this.setWorkspaces();\r\n            _this.loadWorkspace($(this).val());\r\n            _this.hasChanged = true;\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspace-create\", function() {\r\n           _this.getWorkspaceName();\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-rename\", function() {\r\n            _this.renameList($(this).attr('data-listid'));\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-clear\", function() {\r\n            _this.clearList($(this).attr('data-listid'));\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \".list-delete\", function() {\r\n            _this.deleteList($(this).attr('data-listid'));\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspace-rename\", function() {\r\n            _this.renameWorkspace(_this.settings.currentWorkspace);\r\n        });\r\n\r\n        $(\"body\").on(\"click\", \"#workspace-delete\", function() {\r\n            _this.deleteWorkspace(_this.settings.currentWorkspace);\r\n        });\r\n\r\n\r\n    }\r\n\r\n    async getListName() {\r\n        var _this = this;\r\n        const {value: listName} = await Swal.fire({\r\n            title: 'Enter New List Name',\r\n            input: 'text',\r\n            inputValidator: (value) => {\r\n                if (value.length < 3) {\r\n                    return 'List name must be at least three characters';\r\n                }\r\n            },\r\n            showCloseButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create List',\r\n            confirmButtonAriaLabel: 'Create List',\r\n            cancelButtonAriaLabel: 'Cancel',\r\n            cancelButtonText: 'Cancel',\r\n            focusConfirm: false\r\n        });\r\n\r\n        if (listName) {\r\n            _this.hasChanged = true;\r\n            _this.addList(3, listName);\r\n        }\r\n    }\r\n\r\n    async getWorkspaceName() {\r\n        var _this = this;\r\n        const {value: workspaceName} = await Swal.fire({\r\n            title: 'Enter New Workspace Name',\r\n            input: 'text',\r\n            inputValidator: (value) => {\r\n                if (value.length < 3) {\r\n                    return 'Workspace name must be at least three characters';\r\n                }\r\n            },\r\n            showCloseButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create Workspace',\r\n            confirmButtonAriaLabel: 'Create Workspace',\r\n            cancelButtonAriaLabel: 'Cancel',\r\n            cancelButtonText: 'Cancel',\r\n            focusConfirm: false\r\n        });\r\n\r\n        if (workspaceName) {\r\n            _this.hasChanged = true;\r\n            _this.createWorkspace(workspaceName);\r\n        }\r\n    }\r\n\r\n    async renameList(listId) {\r\n        var _this = this;\r\n        const {value: listName} = await Swal.fire({\r\n            title: 'Enter New List Name',\r\n            input: 'text',\r\n            inputValidator: (value) => {\r\n                if (value.length < 3) {\r\n                    return 'List name must be at least three characters';\r\n                }\r\n            },\r\n            showCloseButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create List',\r\n            confirmButtonAriaLabel: 'Create List',\r\n            cancelButtonAriaLabel: 'Cancel',\r\n            cancelButtonText: 'Cancel',\r\n            focusConfirm: false\r\n        });\r\n\r\n        if (listName) {\r\n            _this.hasChanged = true;\r\n\r\n            // Rename in DOM\r\n            $(\".project-widget[data-listid='\" + listId + \"']>header>h2\").text(listName);\r\n        }\r\n    }\r\n\r\n    async renameWorkspace(workspaceId) {\r\n        var _this = this;\r\n        const {value: workspaceName} = await Swal.fire({\r\n            title: 'Enter New Workspace Name',\r\n            input: 'text',\r\n            inputValidator: (value) => {\r\n                if (value.length < 3) {\r\n                    return 'Workspace name must be at least three characters';\r\n                }\r\n            },\r\n            showCloseButton: true,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Create Workspace',\r\n            confirmButtonAriaLabel: 'Create Workspace',\r\n            cancelButtonAriaLabel: 'Cancel',\r\n            cancelButtonText: 'Cancel',\r\n            focusConfirm: false\r\n        });\r\n\r\n        if (workspaceName) {\r\n            _this.hasChanged = true;\r\n            _this.workspace.title = workspaceName;\r\n            _this.workspaces[_this.workspaceIndex] = _this.workspace;\r\n            _this.updateWorkspaceDropdown();\r\n        }\r\n    }\r\n\r\n    async getImportData() {\r\n        const {value: text} = await Swal.fire({\r\n            title: 'Importing Your Data',\r\n            text: 'Please paste the contents of your exported todobackup.json file below and click \"OK\"',\r\n            input: 'textarea',\r\n            inputPlaceholder: 'Paste your backup here',\r\n            showCancelButton: true\r\n        })\r\n\r\n        if (text) {\r\n            var importedData = JSON.parse(text);\r\n            // Make sure data structure has settings and workspace data\r\n            if (!importedData.hasOwnProperty('settings') || !importedData.hasOwnProperty('workspaces')) {\r\n                Swal.fire({\r\n                    type: 'error',\r\n                    title: 'Invalid Data',\r\n                    text: 'Your backup does not appear to contain valid data or is formatted incorrectly. Please try again.',\r\n                });\r\n            } else {\r\n                this.settings = importedData.settings;\r\n                this.workspaces = importedData.workspaces;\r\n                this.loadWorkspace(this.workspaces[0].id);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearList(listId) {\r\n        Swal.fire({\r\n            title: 'Clear list?',\r\n            text: \"This action cannot be undone!\",\r\n            type: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                _this.hasChanged = true;\r\n\r\n                // Remove from DOM\r\n                $(\".todo-container[data-listid='\"  + listId + \"']\").html('');\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteList(listId) {\r\n        Swal.fire({\r\n            title: 'Delete list?',\r\n            text: \"This action cannot be undone!\",\r\n            type: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                _this.hasChanged = true;\r\n\r\n                // Remove from the DOM\r\n                $(\".project-widget[data-listid='\" + listId + \"']\").parent().remove();\r\n            }\r\n        });\r\n    }\r\n\r\n    deleteWorkspace(workspaceId) {\r\n        var _this = this;\r\n        // Only allow user to delete workspace if it's not the only workspace\r\n        if (this.workspaces.length > 1) {\r\n            Swal.fire({\r\n                title: 'Delete workspace?',\r\n                text: \"This action cannot be undone!\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n            }).then((result) => {\r\n                if (result.value) {\r\n                    _this.hasChanged = true;\r\n\r\n                    for(var i = 0; i < _this.workspaces.length; i++) {\r\n                        if (_this.workspaces[i].id == workspaceId) {\r\n                            _this.workspaces.splice(i, 1);\r\n\r\n                            // Once deleted, load the first available workspace\r\n                            _this.loadWorkspace(_this.workspaces[0].id);\r\n                            _this.updateWorkspaceDropdown();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            Swal.fire({\r\n                type: 'error',\r\n                title: 'Unable to delete workspace',\r\n                text: 'This is your only workspace. You must create a new workspace before deleting this one.',\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    checkLocalStorage() {\r\n        try {\r\n            localStorage.setItem('test', 'test');\r\n            localStorage.removeItem('test');\r\n            return true;\r\n        } catch(e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    localStorageSetup() {\r\n        localStorage.setItem('settings', JSON.stringify(this.settings));\r\n        localStorage.setItem('workspaces', JSON.stringify(this.workspaces));\r\n        return JSON.parse(localStorage.getItem('workspaces'));\r\n    }\r\n\r\n    getSettings() {\r\n        if (this.useLocalStorage) {\r\n            return JSON.parse(localStorage.getItem('settings'));\r\n        } else {\r\n            return this.settings;\r\n        }\r\n    }\r\n\r\n    setSettings() {\r\n        if (this.useLocalStorage) {\r\n            localStorage.setItem('settings', JSON.stringify(this.settings));\r\n        }\r\n    }\r\n\r\n    getWorkspaces() {\r\n        if (this.useLocalStorage) {\r\n            return JSON.parse(localStorage.getItem('workspaces'));\r\n        } else {\r\n            return this.workspaces;\r\n        }\r\n    }\r\n\r\n    setWorkspaces() {\r\n        if (this.useLocalStorage) {\r\n            localStorage.setItem('workspaces', JSON.stringify(this.workspaces));\r\n        }\r\n    }\r\n\r\n    updateWorkspaceDropdown() {\r\n        $(\"#workspace-selection option\").remove();\r\n        for (var i = 0; i < this.workspaces.length; i++) {\r\n            if (this.workspaces[i].id == this.settings.currentWorkspace) {\r\n                $(\"#workspace-selection\").append('<option value=\"' + this.workspaces[i].id + '\" selected>' + this.workspaces[i].title + '</option>');\r\n            } else {\r\n                $(\"#workspace-selection\").append('<option value=\"' + this.workspaces[i].id + '\">' + this.workspaces[i].title + '</option>');\r\n            }\r\n        }\r\n    }\r\n\r\n    loadWorkspace(workspaceId) {\r\n        console.log(\"Loading workspace\");\r\n        this.settings.currentWorkspace = workspaceId;\r\n        // Find the correct workspace\r\n        for(var i = 0; i < this.workspaces.length; i++) {\r\n            if (this.workspaces[i].id == workspaceId) {\r\n                // Reset task and list indexes\r\n                this.currentTaskIndex = 1;\r\n                this.currentListIndex = 1;\r\n\r\n                // Store for easier manipulation\r\n                this.workspaceIndex = i;\r\n                this.workspace = this.workspaces[i];\r\n\r\n                // Empty all list containers\r\n                $(\".list-container\").html('');\r\n\r\n                // Load all lists for the workspace, but only display lists once they are whole\r\n                for(var j = 0; j < this.workspace.lists.length; j++) {\r\n                    var list = this.workspace.lists[j];\r\n                    var tasksHtml = '';\r\n                    this.currentListIndex++;\r\n\r\n                    for(var k = 0; k < list.tasks.length; k++) {\r\n                        var task = this.workspace.lists[j].tasks[k];\r\n                        tasksHtml = tasksHtml.concat(this.taskHtml(j+1, k+1, task.text, task.checked, task.dateChecked));\r\n                        this.currentTaskIndex++;\r\n                    }\r\n\r\n                    // Now we can add the list\r\n                    $(\".list-container[data-column=\" + list.column + \"]\").append(this.listHtml(j+1, list.title, tasksHtml));\r\n                }\r\n            }\r\n        }\r\n\r\n        // Make each list sortable\r\n        var groups = $(\".list-group\");\r\n\r\n        for (var i = 0; i < $(groups).length; i++) {\r\n            new Sortable($(groups)[i], {\r\n                animation: 150,\r\n                ghostClass: 'bg-info'\r\n            });\r\n        }\r\n\r\n        // Make each list container a sortable and put them in a group\r\n        var containers = $(\".list-container\");\r\n        for (var i = 0; i < $(containers).length; i++) {\r\n            new Sortable($(containers)[i], {\r\n                animation: 150,\r\n                ghostClass: 'bg-info',\r\n                group: 'shared'\r\n            });\r\n        }\r\n\r\n        console.log(\"Workspace loaded\");\r\n        this.updateWorkspaceDropdown();\r\n        this.hasChanged = true;\r\n    }\r\n\r\n    addList(column, title) {\r\n        $(\".list-container[data-column=\" + column + \"]\").append(this.listHtml(this.currentListIndex++, title));\r\n    }\r\n\r\n    addTask(listId, taskText) {\r\n        $(\".todo-container[data-listid=\" + listId + \"] .list-group\")\r\n            .append(this.taskHtml(listId, this.currentTaskIndex++, taskText, false, null));\r\n    }\r\n\r\n    // Applies to the current workspace\r\n    applyTodoFilter(listId)\r\n    {\r\n        $(\".list-group-item[data-listid='\" + listId + \"']:not(.checked)\").show();\r\n        $(\".list-group-item[data-listid='\" + listId + \"'].checked\").hide();\r\n    }\r\n\r\n    applyCompletedFilter(listId)\r\n    {\r\n        $(\".list-group-item[data-listid='\" + listId + \"']:not(.checked)\").hide();\r\n        $(\".list-group-item[data-listid='\" + listId + \"'].checked\").show();\r\n    }\r\n\r\n    removeFilters(listId)\r\n    {\r\n        $(\".list-group-item[data-listid='\" + listId + \"']:not(.checked)\").show();\r\n        $(\".list-group-item[data-listid='\" + listId + \"'].checked\").show();\r\n    }\r\n\r\n    createWorkspace(name)\r\n    {\r\n        console.log(\"Creating workspace with name \" + name);\r\n\r\n        // Create a copy of the default workspace and update the name and id\r\n        var newWorkspace = this.copyObject(this.defaultWorkspace);\r\n        newWorkspace.title = name;\r\n        newWorkspace.id = this.workspaces.length + 1;\r\n\r\n        // Save before making any changes\r\n        console.log(\"Saving...\");\r\n        this.setSettings();\r\n        this.workspace.lists = this.serializeLists();\r\n        this.workspaces[this.workspaceIndex] = this.workspace;\r\n        this.setWorkspaces();\r\n\r\n        // Now push this new workspace onto the workspaces stack and load it\r\n        this.workspaces.push(newWorkspace);\r\n        this.loadWorkspace(newWorkspace.id);\r\n        this.hasChanged = true;\r\n    }\r\n\r\n\r\n\r\n    listData(column, title, taskData) {\r\n        // Include some default tasks if provided\r\n        taskData = taskData || [];\r\n\r\n        return {\r\n            'column' : column,\r\n            'theme' : 'default',\r\n            'collapsed' : false,\r\n            'sort-lock' : false,\r\n            'filter' : 'all',\r\n            'title' : title,\r\n            'tasks' : taskData\r\n        };\r\n    }\r\n\r\n    listHtml(listId, title, tasksHtml) {\r\n        // Allow generation without providing a task list\r\n        var tasksHtml = tasksHtml || '';\r\n\r\n        return '<div class=\"row\" style=\"margin-left: 0px; margin-right: 0px; margin-bottom: 30px;\"><div class=\"project-widget\" data-listid=\"' + listId + '\">'+\r\n            '<header role=\"heading\">' +\r\n                '<h2>' + title + '</h2>' +\r\n                '<div class=\"widget-controls\">' +\r\n                    '<div class=\"dropdown widget-options\">' +\r\n                        '<span class=\"dropdown-toggle\" data-toggle=\"dropdown\"><i class=\"fa fa-cog fa-2x\"></i></span>' +\r\n                        '<ul class=\"dropdown-menu\">' +\r\n                            '<li><a class=\"list-filter-completed\" href=\"#\" data-listid=\"' + listId + '\">View Completed</a></li>' +\r\n                            '<li><a class=\"list-filter-todo\" href=\"#\" data-listid=\"' + listId + '\">View Todo</a></li>' +\r\n                            '<li><a class=\"list-filter-all\" href=\"#\" data-listid=\"' + listId + '\">View All</a></li>' +\r\n                            '<li role=\"separator\" class=\"divider\"></li>' +\r\n                            '<li><a class=\"list-rename\" href=\"#\" data-listid=\"' + listId + '\">Rename List</a></li>' +\r\n                            '<li><a class=\"list-clear\" href=\"#\" data-listid=\"' + listId + '\">Delete All Items</a></li>' +\r\n                            '<li><a class=\"list-delete\" href=\"#\" data-listid=\"' + listId + '\">Delete List</a></li>' +\r\n\r\n                        '</ul>' +\r\n                    '</div>' +\r\n                '</div>' +\r\n            '</header>' +\r\n            '<div role=\"content\">' +\r\n                '<div class=\"widget-content no-padding\">' +\r\n                    '<div class=\"form-group full-width\">' +\r\n                        '<input type=\"text\" class=\"form-control todo-input\" placeholder=\"Add New Task\" data-listid=\"' + listId + '\">' +\r\n                    '</div>' +\r\n                    '<div class=\"todo-container\" data-listid=\"' + listId + '\">' +\r\n                        '<ul class=\"list-group\">' + tasksHtml +\r\n                        '</ul>' +\r\n                    '</div>' +\r\n                '</div>' +\r\n            '</div>' +\r\n        '</div></div>';\r\n    }\r\n\r\n    taskData(taskText, checked, dateChecked) {\r\n        return {\r\n            'text' : taskText,\r\n            'checked' : checked,\r\n            'dateChecked': dateChecked\r\n        };\r\n    }\r\n\r\n    taskHtml(listId, taskId, taskText, checked, dateChecked) {\r\n        if (checked == true) {\r\n            checked = 'checked';\r\n            var strikethrough = 'strikethrough';\r\n        } else {\r\n            checked = '';\r\n            var strikethrough = '';\r\n            dateChecked = '';\r\n        }\r\n\r\n        return '<li class=\"todo-draggable list-group-item ' + checked + '\" data-listid=\"' + listId +'\" data-taskid=\"' + taskId + '\">' +\r\n                '<div class=\"task-action\">' +\r\n                    '<btn class=\"task-delete\" data-listid=\"' + listId + '\" data-taskid=\"' + taskId + '\"><i class=\"fa fa-times\"></i></btn>' +\r\n                '</div>' +\r\n                '<div class=\"checkbox-wrapper\">' +\r\n                    '<div class=\"checkbox\">' +\r\n                        '<input type=\"checkbox\" class=\"todo-item\" ' + checked + '>' +\r\n                    '</div>' +\r\n                    '<div class=\"checkbox-label\">' +\r\n                        '<label class=\"' + strikethrough + '\">' + taskText + '</label>' +\r\n                    '</div>' +\r\n                    '<div class=\"task-date\">' + dateChecked + '</div>' +\r\n                '</div>' +\r\n            '</li>';\r\n    }\r\n\r\n    getCurrentDate() {\r\n        var today = new Date();\r\n        var dd = today.getDate();\r\n        var mm = today.getMonth() + 1; //January is 0!\r\n\r\n        var yyyy = today.getFullYear();\r\n        if (dd < 10) {\r\n            dd = '0' + dd;\r\n        }\r\n        if (mm < 10) {\r\n            mm = '0' + mm;\r\n        }\r\n        return mm + '/' + dd + '/' + yyyy;\r\n    }\r\n\r\n    // Defaults to the current workspace\r\n    completeTask(listId, taskId) {\r\n        $(\".list-group-item[data-listid=\" + listId + \"][data-taskId=\" + taskId + \"]\").find('.task-date').text(this.getCurrentDate());\r\n    }\r\n\r\n    unCompleteTask(listId, taskId) {\r\n        $(\".list-group-item[data-listid=\" + listId + \"][data-taskId=\" + taskId + \"]\").find('.task-date').text('');\r\n    }\r\n\r\n    serializeLists() {\r\n        var lists = [];\r\n        var listPosition = 1;\r\n\r\n        // Loop through each column\r\n        for (var i = 1; i <= 3; i++) {\r\n            $(\".list-container[data-column='\" + i + \"'] .project-widget\").each(function(listIndex, listElem) {\r\n                var newList = {\r\n                    'column': i,\r\n                    'theme': 'default',\r\n                    'collapsed': false,\r\n                    'sort-lock': false,\r\n                    'title': $(listElem).find('header>h2').text(),\r\n                    'tasks': []\r\n                };\r\n\r\n                // Loop through all tasks\r\n                $(listElem).find(\".todo-container>.list-group>.list-group-item\").each(function(taskIndex,taskElem) {\r\n                    newList.tasks.push({\r\n                        'text': $(taskElem).find(\".checkbox-label\").text(),\r\n                        'checked': $(taskElem).find(\"input[type='checkbox']\").prop('checked'),\r\n                        'dateChecked': ($(taskElem).find('.task-date').text().length > 0 ? $(taskElem).find('.task-date').text() : null)\r\n                    });\r\n                });\r\n                lists.push(newList);\r\n            });\r\n        }\r\n\r\n        return lists;\r\n    }\r\n\r\n    // Returns a deep copy of an object that isn't a reference\r\n    copyObject(input) {\r\n        return JSON.parse(JSON.stringify(input));\r\n    }\r\n}"],"sourceRoot":""}